<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text>// Uncomment the following line to change the fontsize and font:
fontsize=14
fontfamily=SansSerif //possible: SansSerif,Serif,Monospaced


//////////////////////////////////////////////////////////////////////////////////////////////
// Welcome to UMLet!
//
// Double-click on elements to add them to the diagram, or to copy them
// Edit elements by modifying the text in this panel
// Hold Ctrl to select multiple elements
// Use Ctrl+mouse to select via lasso
//
// Use +/- or Ctrl+mouse wheel to zoom
// Drag a whole relation at its central square icon
//
// Press Ctrl+C to copy the whole diagram to the system clipboard (then just paste it to, eg, Word)
// Edit the files in the "palettes" directory to create your own element palettes
//
// Select "Custom Elements &gt; New..." to create new element types
//////////////////////////////////////////////////////////////////////////////////////////////


// This text will be stored with each diagram;  use it for notes.</help_text>
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>35</y>
      <w>85</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>/RPGraph::Graph/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>605</x>
      <y>45</y>
      <w>65</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;100.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>580</x>
      <y>95</y>
      <w>120</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>RPGraph::UGraph
{adjacency_list}
--
-adjacency_list
+UGraph(Template&lt;T&gt; source): Determines adapter used?
+allow_duplicates
+vector&lt;uint32_t&gt; degrees
^--- Is currently an unordered_map...
--
friend class: EdgelistAdapter
(or maybe an initializer)
-add_edge(nid_t, nid_t)
+has_edge(nid_t, nid_t)
--
Responsibilities
-- Public dirty edge interface
-- Private contiguous edge interface</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1020</x>
      <y>210</y>
      <w>180</w>
      <h>300</h>
    </coordinates>
    <panel_attributes>RPGraph::DatasetAdapter
{Map node ids for other DSs}
--
DatasetAdapter(filePath??: String)
--
-map(nid_t): contiguous_nid_t
-map(contiguous_nid_t): nid_t
+get_iterator(): Iterator(nid_t --&gt; contiguous_nid_t)
   ^---- Iterator could be a class that uses yield.
+get_write_stream(): Hooks up a mapping function to
                     a writing stream.
--
Responsibilities
-- Provide public interface with external datasets that
   may not be contiguous.  Having contiguous ids 
   internal to all other data structures (and the program
   as a whole) allows for much more efficient and
   maintainable implementation.

-- Input: File is specified in constructor.  Provides 
           mapped iterator/stream over file.

-- Output: Accept contiguous node id streams, and write as 
       original node id streams.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>405</x>
      <y>305</y>
      <w>210</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>RPGraph::GraphViewer
{Public graph_viewer interface}
--
+GraphViewer(filePath: String)
--
-vector&lt;UGraph&gt; graphs
-CommunityAlgo comm_algo
--
+set_comm_algo(CommunityAlgo??ENUM??)
+set_display_method(IOUtility??ENUM??) 
^------ Example: LayoutPNGWriterUtility
+Compress??(): result_struct??
+Show(): Side effect ==&gt; IO is displayed.
--
Responsibilities
-- Aggregate and initialize all components</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>740</x>
      <y>395</y>
      <w>85</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>/CommunityAlgo/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>710</x>
      <y>465</y>
      <w>190</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>CommunityAlgos?::DisjointPartitionAlgo
{Compute a disjoiint partition of a network}
--
+computePartition(UGraph): Template&lt;T&gt;??? Or just UG?
+write_partition(DatasetAdapter, filePath: String)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>775</x>
      <y>430</y>
      <w>55</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>730</x>
      <y>550</y>
      <w>175</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>CommunityAlgos?::SCoDA
{Execute SCoDA algorithm}
--
SCoDA(????): result_struct??
--
-get_mode_degree(UGraph): int; ??ceiling or floor??
+
--
Responsibilities
-- Create disjoint partition with SCoDA algorithm.</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>775</x>
      <y>510</y>
      <w>55</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>410</y>
      <w>110</w>
      <h>75</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
1</panel_attributes>
    <additional_attributes>200.0;130.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1105</x>
      <y>0</y>
      <w>355</w>
      <h>640</h>
    </coordinates>
    <panel_attributes>Non-contiguous Node Ids

ONLY PLACE WHERE:
original dataset node ids live.
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>10</y>
      <w>430</w>
      <h>225</h>
    </coordinates>
    <panel_attributes>IMPORTANT: Either we want to isolate the original node_ids to the dataset, and use contiguous node_ids everywhere internally,
OR we want to use the original node_ids everywhere EXCEPT for when absolutely necessary for data structures.

Contiguous:
  Pros:
    Easy to use with GPU code
    Efficient implemenations possible everywhere
  Cons:
    Strict adapter policy required.  May require holding an object that internally contains a map to allow for IO with partitions later on.

Original:
  Pros: 
    Internal representations that are publicly visible will match external representations!!
  Cons:
    Hard to work with GPU code.  Possible to make bad errors.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1265</x>
      <y>455</y>
      <w>155</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>_partition_output_file: fstream_
--
Non-contiguous node_id partitions</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1275</x>
      <y>220</y>
      <w>105</w>
      <h>35</h>
    </coordinates>
    <panel_attributes>_edgelist_file: fstream_
--
Non-contiguous node_id pairs</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1195</x>
      <y>225</y>
      <w>90</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
&lt;&lt;READS&gt;&gt;</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1195</x>
      <y>460</y>
      <w>80</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
&lt;&lt;WRITES&gt;&gt;</panel_attributes>
    <additional_attributes>140.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>340</y>
      <w>420</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
1</panel_attributes>
    <additional_attributes>820.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>895</x>
      <y>485</y>
      <w>135</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
**&lt;&lt;USES TO WRITE&gt;&gt;**</panel_attributes>
    <additional_attributes>250.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>845</x>
      <y>95</y>
      <w>120</w>
      <h>145</h>
    </coordinates>
    <panel_attributes>RPGraph::CommUGraph
{adjacency_list}
--
-adjacency_list
+CommUGraph(Template&lt;T&gt; source): Determines adapter used?
+allow_duplicates
+vector&lt;uint32_t&gt; degrees
^--- Is currently an unordered_map...
--
friend class: EdgelistAdapter
(or maybe an initializer)
-add_edge(nid_t, nid_t)
+has_edge(nid_t, nid_t)
--
Responsibilities
-- Public dirty edge interface
-- Private contiguous edge interface</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>695</x>
      <y>115</y>
      <w>160</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;instanceOf&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;20.0;300.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>815</x>
      <y>0</y>
      <w>280</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>TODO: Add GraphLayout, and all other classes as necessary.
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>235</y>
      <w>400</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-
**&lt;&lt;USES TO READ&gt;&gt;**</panel_attributes>
    <additional_attributes>780.0;160.0;10.0;160.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>465</x>
      <y>175</y>
      <w>125</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
1+

(Includes CommUGraphs)</panel_attributes>
    <additional_attributes>230.0;20.0;10.0;20.0;10.0;260.0</additional_attributes>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>970</x>
      <y>100</y>
      <w>105</w>
      <h>85</h>
    </coordinates>
    <panel_attributes>Should we extended an 
fstream class??  Can we?
Overload operator&gt;&gt;???
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
